name: CI - TESTE

on:
  repository_dispatch:
    types: [CI_TESTE]

env:
  BS_USER: ${{ secrets.BROWSERSTACK_USERNAME }}
  BS_KEY:  ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

jobs:
  upload-apps:
    runs-on: ubuntu-latest
    steps:
      - name: Instalar jq (garantia)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      # Resolve o repositório de origem dos artifacts e o run_id
      - name: Resolver repo de origem
        id: src
        run: |
          OWNER="${{ github.event.client_payload.source_owner }}"
          REPO="${{ github.event.client_payload.source_repo }}"
          RUN_ID="${{ github.event.client_payload.workflow_run_id }}"

          # Fallback: se não vier no payload, usa o próprio repo receiver
          if [ -z "$OWNER" ]; then OWNER="${{ github.repository_owner }}"; fi
          if [ -z "$REPO" ]; then REPO="${{ github.event.repository.name }}"; fi

          echo "owner=$OWNER" >> $GITHUB_OUTPUT
          echo "repo=$REPO" >> $GITHUB_OUTPUT
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

          echo "Artifact Android esperado: ${{ github.event.client_payload.artifact_names.android_apk }}"
          echo "Artifact iOS esperado:     ${{ github.event.client_payload.artifact_names.ios_ipa }}"

      - name: Listar artifacts do run (debug robusto)
        run: |
          URL="https://api.github.com/repos/${{ steps.src.outputs.owner }}/${{ steps.src.outputs.repo }}/actions/runs/${{ steps.src.outputs.run_id }}/artifacts"
          echo "GET $URL"
          RESP_FILE=$(mktemp)
          curl -sS -w "\n%{http_code}\n" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.REPO_ACCESS_TOKEN }}" \
            "$URL" > "$RESP_FILE"
          BODY=$(head -n -1 "$RESP_FILE")
          CODE=$(tail -n 1 "$RESP_FILE")
          echo "HTTP $CODE"
          # Mostra chaves para diagnóstico (pode ser message/ documentation_url em erros)
          echo "$BODY" | jq 'keys' || true
          echo "---- Lista (se houver) ----"
          echo "$BODY" | jq -r '.artifacts // [] | .[] | "\(.id)\t\(.name)\texpired=\(.expired)"'

          if [ "$CODE" = "404" ]; then
            echo "::error::404 Not Found - Verifique owner/repo e se o run_id pertence a esse repo."
            exit 1
          fi
          if [ "$CODE" = "403" ]; then
            echo "::error::403 Forbidden - Token sem acesso, ou SSO não autorizado na org."
            exit 1
          fi

      - name: Download Android APK artifact
        if: ${{ github.event.client_payload.artifacts.android == 'true' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.REPO_ACCESS_TOKEN }}
          owner: ${{ steps.src.outputs.owner }}
          repo: ${{ steps.src.outputs.repo }}
          run_id: ${{ steps.src.outputs.run_id }}
          name: ${{ github.event.client_payload.artifact_names.android_apk }}
          path: ./apk

      - name: Download iOS IPA artifact
        if: ${{ github.event.client_payload.artifacts.ios == 'true' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.REPO_ACCESS_TOKEN }}
          owner: ${{ steps.src.outputs.owner }}
          repo: ${{ steps.src.outputs.repo }}
          run_id: ${{ steps.src.outputs.run_id }}
          name: ${{ github.event.client_payload.artifact_names.ios_ipa }}
          path: ./ipa

      - name: Upload APK to BrowserStack Automated
        if: ${{ github.event.client_payload.artifacts.android == 'true' }}
        id: upload-apk
        run: |
          set -e
          APK_FILE=$(ls ./apk/*.apk | head -n 1 || true)
          if [ -z "$APK_FILE" ]; then
            echo "Nenhum APK encontrado em ./apk"; exit 1
          fi
          echo "Encontrado APK: $APK_FILE"
          RESP=$(curl -s -u "$BS_USER:$BS_KEY" -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
                 -F "file=@$APK_FILE")
          echo "$RESP"
          APP_URL=$(echo "$RESP" | jq -r '.app_url // empty')
          if [ -z "$APP_URL" ]; then
            echo "Falha ao obter app_url do BrowserStack"; exit 1
          fi
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT

      - name: Upload IPA to BrowserStack Automated
        if: ${{ github.event.client_payload.artifacts.ios == 'true' }}
        id: upload-ipa
        run: |
          set -e
          IPA_FILE=$(ls ./ipa/*.ipa | head -n 1 || true)
          if [ -z "$IPA_FILE" ]; then
            echo "Nenhum IPA encontrado em ./ipa"; exit 1
          fi
          echo "Encontrado IPA: $IPA_FILE"
          RESP=$(curl -s -u "$BS_USER:$BS_KEY" -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
                 -F "file=@$IPA_FILE")
          echo "$RESP"
          APP_URL=$(echo "$RESP" | jq -r '.app_url // empty')
          if [ -z "$APP_URL" ]; then
            echo "Falha ao obter app_url do BrowserStack"; exit 1
          fi
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          {
            echo "### BrowserStack Upload Summary"
            echo ""
            echo "**Source repo:** ${{ steps.src.outputs.owner }}/${{ steps.src.outputs.repo }}"
            echo "**Run ID:**      ${{ steps.src.outputs.run_id }}"
            echo "**Platform:**    ${{ github.event.client_payload.platform }}"
            echo "**Version:**     ${{ github.event.client_payload.version }}"
            echo "**Build:**       ${{ github.event.client_payload.build }}"
            if [ "${{ github.event.client_payload.artifacts.android }}" = "true" ]; then
              echo ""
              echo "- **Android APK URL:** \`${{ steps.upload-apk.outputs.app_url }}\`"
            fi
            if [ "${{ github.event.client_payload.artifacts.ios }}" = "true" ]; then
              echo ""
              echo "- **iOS IPA URL:** \`${{ steps.upload-ipa.outputs.app_url }}\`"
            fi
          } >> "$GITHUB_STEP_SUMMARY"
